---->Конструкция if(){}else{}

---->Операторы сравнения:
>
<
>=
<=
==
!=
=== - оценивает, ссылаются ли две ссылки на один объект 
!== - оценивает, ссылаются ли две ссылки на один объект

---->Логические операторы
&&
||
!

---->Можно объявлять переменые с условными значениями
val auraVisible = healthPoints > 50 && isBlessed || isImmortal
if(auraVisible)
    {
        println("GREEN")
    }else{
        println("NONE")
    }

---->Интервалы
  Интервал определяется оператором .., например 1..5. Интервал включает все значения,
начиная с находящегося сдева от оператора .. и заканчивая находящимся справа. Например,
1..5 включает числа 1,2,3,4,5. Интервалы могут представлять последовательности символов.
  Для проверки попадания заданного числа в интервал можно использовать ключевое слово in(внутри).
Использование интервалов в условных выражениях решает проблему с порядком выполнения else if. С 
интервалами ветви могут располагаться в любой последовательности, и код все равно будет выполняться.
  Кроме оператора .. существуют еще несколько функций создания интервалов. Функция downTo создает 
убывающий интервал. Функция until создает интервал, не включающий верхнюю границу выбранного диапазона.

---->Условное выражение when - еще один способ управления потоком выполнения. Обеспечивает краткий синтаксис
и особенно хорошо подходит для условий с тремя и более ветвями.(По моему чем-то напоминает switch())
val race = "gnome"
val faction = when(race) {
"draft" -> "Keepers of the Mines"
"gnome" -> "Keepers of the Mines"
"orc" -> "Free People of the Rolling Hills"
"human" -> "Free People of the Rolling Hills"
}

