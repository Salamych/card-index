Функции проверки условий позволяют объявить условия, которые должны быть соблюдены до выполнения кода.

В стандартной библиотеке Котлин есть пять функций проверки условий; это разнообразие отличает их от
других вариантов проверки на null.

checkNotNull - Возбуждает IllegalStateException, если аргумент null. В противном случае возвращает
полученное значение.

require - Возбуждает IllegalStateException, если условие не выполняется.

requireNotNull - Возбуждает IllegalStateException, если аргумент null. В противном случае возвращает
полученное значение.

error - Возбуждает IllegalStateException с указанным сообщением, если аргумент null. В противном 
случае возвращает полученное значение.

assert - Возбуждает AssertionError, если услови не выполняется и на этапе компиляции установлен флаг,
разрешающий проверку утверждений во время выполнения.


checkNotNull:
fun main(args: Array<String>){
    var swordJuggling: Int? = null
    val isJugglingProficient = (1..3).shuffled().last() == 3
    if(isJugglingProficient){
        swordJuggling = 2
    }
    try {
        proficiencyCheck(swordJuggling)
        swordJuggling = swordJuggling!!.plus(1)
    }catch(e: Exception){
        println(e)
    }
    println("You juggle $swordJuggling swords!")
}
fun proficiencyCheck(swordJuggling: Int?){
//    swordJuggling ?: throw IllegalStateException("Player cannot juggle swords")
//    swordJuggling ?: throw UnskilledSwordJugglerException()
    checkNotNull(swordJuggling,{"Player cannot juggle swords"})
}

class UnskilledSwordJugglerException():
        IllegalStateException("Player cannot juggle swords")


require(требуется):
fun juggleSwords(swordsJuggling: Int){
	require(swordsJuggling >= 3, {"Juggle at least 3 swords to be exciting."})
}

