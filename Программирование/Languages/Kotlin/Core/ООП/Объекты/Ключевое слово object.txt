Если необходим один экземпляр с непротиворечивым состоянием, существующий на 
протяжении всего времени работы программы, нужно объявить синглтон. Экземпляр 
такого класса будет создан автоматически при первом обращении к нему. Этот
экземпляр будет существовать на всем протяжении работы программы, и при
каждом следующем обращении будет возвращаться первоначальный экземпляр.

Есть три способа применения ключевого слова object: для создания объявлений
объектов (синглтонов), анонимных объектов и вспомогательных объектов.

--------------------Объявления объектов-----------------------------

Объявления объектов (синглтоны) полезны для организации и управления состоянием,
особенно когда надо поддерживать какое-то состояние на протяжении работы программы.

Так как экземпляр синглтона создается автоматически, нет нужды добавлять свой конструктор
с кодом инициализации. Вместо этого достаточно определить блок инициализации, выполняющий
все необходимое для инициализации объекта.

Чтобы обратиться к объекту, нужно сослаться на одно из его свойств или функций.

Функция объекта вызывается с ипользованием имени объекта, в которм она объявлена, а не 
экземпляра класса.

package com.bignerdranch.nyethack

fun main(args: Array<String>){
  Game.play()
}

object Game{
    private val player = Player("Madrigal")
    private var currentRoom: Room = TownSquare()
    
    init{
        println("Welcome, adventurer.")
        player.castFireball()
    }
    fun play(){
        while(true){
            println(currentRoom.description())
            println(currentRoom.load())

            //Состояние игрока
            printPlayerStatus(player)
            
            print("> Enter your command: ")
            println("Last command: ${readLine()}")
        }
    }
    //Статус здоровья
    private fun printPlayerStatus(player: Player) {
        println("(Aura: ${player.auraColor()}) (Blessed: ${if (player.isBlessed) "YES" else "NO"})")
        println("${player.name} ${player.formatHealthStatus()}")

    }
}

------------------------Анонимные объекты----------------------

Иногда объявление нового именнованного класса выглядит излишеством. Например в некоторых случаях
нужен экземпляр класса, немного отличающегося от уже существующего, и это экземпляр будет использован
лишь однажды. Более того, он будет настолько временным, что ему даже имя не нужно. Тогда можно
объявить с помощью ключевого слова object анонимный объект.

val abandonedTownSquare = object : TownSquare() {
     override fun load() = "You anticipate applause, but no one is here..."
}  

Этот класс соблюдает правила ключевого слова object, в том смысле, что одновременно может
существовать только один экземпляр, но его область видимости гораздо уже области видимости
именнованного синглтона. Слабой стороной анонимного класса является его зависимость от места
объявления. Если анонимный класс объявлен на уровне файла, он инициализируется немедленно,
если внутри другого класса - одновременно с этим классом.


--------------Вспомогательные объекты---------------------------------

Если нужно связать инициализацию объекта с экземпляром класса, это можно организовать,
определив вспомогательный объект. Вспомогательный объект объявляется внутри класса
с помощью модификатора companion. У класса не может быть больше одного вспомогательного 
объекта.

Инициализация спомогательного объекта выполняется в двух случаях: при инициализации
вмещающего класса, что делает его хорошим местом для хранения данных в единственном 
экземпляре, имеющих контекстную связь с объявлением класса, и при прямом обращении
к одному из его свойств.

class PremadeWorldMap {
	companion object {
		private const val MAPS_FILEPATH = "nyethack.maps"
		fun load() = File(MAPS_FILEPATH).readBytes()
	}
}

Вызов

PremadeWorldMap.load()