Для каждого объявленного свойства Kotlin сгенерирует поле, метод чтения (геттер) и,
если надо, метод записи (сеттер). Поле - это то место, где храняться данные для свойства.
Прямо объявить поле в классе нельзя. Kotlin инкапсулирует поля, защищая данные в поле и 
открывая доступ к ним через методы свойств. Метод чтения свойства определяет правила его чтения.
Методы чтения создаются для всех свойств. Метод записи определяет правила присваивания значения 
свойству, поэтому он генерируется только для изменяемых свойств, - другими словами, если свойство
объявлено с ключевым словом var.

Можно переопределить методы get() и set(): 

class Player {
    var name = "madrigal"
        get() = field.capitalize()
        set(value) {
            field = value.trim()
        }
}

Ключевое слово field в примере ссылается на поле со значением, которое Kotlin автоматически
создает для свойства. Поле - это место, откуда методы свойства читают и куда запиывают данные,
представляющие свойство.

Когда возвращается версия имени с прописной буквой, содержимое самого поля не меняется.

Метод записи, напротив, изменяет поле свойств.
Метод trim() удаляет начальные и конечные пробелы.

-----------------Видимость свойств-----------------------------
Свойства определяются на уровне класса. Поэтому они могут быть доступны другим классам,
если область видимости позволяет. Слишком широкая доступность свойства может вызвать
проблемы: имея доступ к данным класса, другие классы смогут внести изменения в экземпляр класса.

Если разрешить открыть доступ к свойству для чтения и закрыть для записи, то свойство будет
доступно для чтения из любой части программы, но изменить его сможет только сам экземпляр класса.

class Player {
    var name = "madrigal"
        get() = field.capitalize()
       private set(value) {
            field = value.trim()
        }
}

---------------------Вычисляемые свойства-------------------
Вычисляемое свойство - это свойство, для которого переопределяется метод get и/или set, не использующий
поле. В таких случаях Kotlin не генерирует поле.

class Dice(){
	val roledValue
		get() = (1..6).shuffled().first()
}

При каждом обращении к свойству roledValue его значение меняется. Это связано с тем, что оно вычисляется
всякий раз, когда к нему обращаются. У него нет ни начального значения, ни значения по умолчанию, и у
него нет поля, которое могло бы хранить значение.