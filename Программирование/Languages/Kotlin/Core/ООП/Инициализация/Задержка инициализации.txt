---------------Поздняя инициализация----------------------

В любое объявление var-свойства можно добавить ключевое слово lateinit. Тогда
компилятор Kotlin позволит отложить инициализацию свойства до того момента,
когда такая возможность появится.

class Player {
	lateinit var alignment: String

	fun determineFate() {
		alignment = "Good"
	}

	fun proclaimFate() {
		if(::alignment.isInitialized) println(alignment)
	}
}

Ключевое слово lateinit действует как негласный договор: "Я обязуюсь инициализировать
эту переменную до первыой попытки обращения к ней".

isInitialized - инструмент для проверки факта инициализации переменных объявленных при помощи
ключевого слова lateinit.

---------------------Отложенная инициализация----------------------

Если для инициализации свойства требуется выполнять сложные вычисления, например читать данные из файла,
или класс не требует немедленной готовности ывойства, можно использовать отложенную инициализацию.

Отложенная инициализация реализована в Котлине через механизм делегатов. Делегат определяет
шаблон инициализации свойства.

Определение делегата осуществляется с помощью ключевого слова by. Стандартная библиотека Котлин включает
несколько готовых делегатов, например lazy. Делегат lazy принимает лямбда-выражение с кодом, который выполняется
для инициализации свойства. 

package com.bignerdranch.nyethack
import java.io.File

class Player(_name: String,
             var healthPoints: Int = 100,
             val isBlessed: Boolean,
             private val isImmortal: Boolean) {
    var name = _name
        get() = "${field.capitalize()} of $hometown"
       private set(value) {
            field = value.trim()
        }

    val hometown by lazy {selectHomeTown()}

    private fun selectHomeTown() = File("data/towns.txt")
        .readText()
        .split(" ")
        .shuffled()
        .first()