Отложенные типы коллекций, как и отложенная инициализация, позволяют увеличить
производительность, особенно при работе с большими коллекциями, потому что 
значения в таких коллекциях создаются только по необходимости.

В Kotlin имеется встроенный тип Sequance отложенной коллекции. Последовательности 
не поддерживают доступ к содержимому по индексам и не контролируют свой размер.
Более того, при работе с последовательностью, есть вероятность получить бесконечное 
количество значений, потому что нет ограничений на количество элементов, которое 
может сгенерировать последовательность.

Для последовательности объявляется функция-итератор, которая вызывается каждый раз,
когда необходимо новое значение. Один из способов объявить последовательность и ее 
итератор - это использовать встроенную в Kotlin функцию generateSequance. generateSequance
принимает начальное значение, которое будет точкой старта для последовательности. При
обращении к последовательности в функциональном стиле generateSequance вызовет
указанный итератор для получения  следующего значения.

fun Int.isPrime(): Boolean {
     (2 until this).map {
         if(this % it == 0) {
             return false // не простое
         }
     }
     return true
 }
 val oneThousandPrimes = generateSequence(3) {value ->
     value + 1
 }.filter {it.isPrime()}.take(1000)

Преобразование списка в последовательность:

val listOfNumbers = (0 until 10000000).toList()
val sequanceOfNumbers = listOfNumbers.asSequance()