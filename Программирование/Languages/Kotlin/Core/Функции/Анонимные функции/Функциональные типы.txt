Функциональный тип может содержать анонимные функции и передаваться по коду, как обычные переменные.

val greetingFunction: () -> String = {
        val currentYear = 2023
        "Welcome to SimVillage, Mayor! (copyright $currentYear)"
    }

println(greetingFunction()) // Welcome to SimVillage, Mayor! (copyright 2023)

Объявлена переменная, за именем которой следует двоеточие и тип. Объявление greetingFunction: () -> String, 
так же как объявление :Int, сообщает компилятору, значение какого типа может хранить переменная. Это
функциональный тип : () -> String, который сообщает компилятору, какой тип функции может содержаться в переменной.

Объявление функционального типа состоит из двух частей: параметров функции в скобках и возвращаемого типа, следующего 
за стрелкой(->).

Объявление типа переменной greetingFunction: () -> String показывает, сто компилятор может присвоить greetingFunction
любую функцию, которая не принимает аргументов (пустые скобки) и возвращает String. Далее, как и в случаях с любыми 
другими объявлениями переменной, компилятор убедится, что функция, присвоенная переменной или переданная в качестве
аргумента, принадлежит нужному типу.

Функции с параметрами
val greetingFunction: (String) -> String = {playerName ->
        val currentYear = 2023
        "Welcome to SimVillage, $playerName! (copyright $currentYear)"
    }
    println(greetingFunction("Guayl")) //Welcome to SimVillage, Guayl! (copyright 2023)

Анонимная функция принимает строку (String). Имя строкового параметра определяется внутри функции, сразу после
открывающей фигурной скобки, а за ним следует стрелка:
val greetingFunction: (String) -> String = {playerName ->