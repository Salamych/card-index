Расширения позволяют добавить функциональности типу без явного изменения объявления типа.

Расширения служат альтернативой наследованию. Они хорошо подходят для добавления
функциональности в тип, если определение класса не доступно или класс не имеет модификатора
open, позволяющего создавать подклассы.

fun String.addEnthusiasm(amount: Int = 1) = this + "!".repeat(amount)

Функции-расширения объявляются тем же способом, что и другие функции, но с одним отличием:
определяя функцию расширения, также указывается тип, известный как принимающий тип, которому 
расширение добавляет возможностей. Для функции addEnthusiasm указан принимающий тип String.

Тело функции addEnthusiasm - это всего лишь одно выражение, которое возвращает строку:
содержимое this и 1 или более восклицательных знаков, в зависимости от значения аргумента
amount (1 - это значение по умолчанию). Клячевое слово this ссылается на экземпляр объекта-
приемника, для которого вызвано расширение (в этом случае String). 

fun main(args: Array<String>){
    println("Madrigal has left the building".addEnthusiasm())  // Madrigal has left the building!
    println("Madrigal has left the building".addEnthusiasm(3)) // Madrigal has left the building!!!
}