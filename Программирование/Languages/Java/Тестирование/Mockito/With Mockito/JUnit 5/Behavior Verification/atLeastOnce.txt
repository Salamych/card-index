package com.hubbersport.mokito.behavior.verification;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InOrder;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class BookServiceTest {

    @InjectMocks
    private BookService bookService;

    @Mock
    private BookRepository bookRepository;

    @Test
    public void testAddBook() {
        Book book = new Book(null, "Mockito in Action", 500, LocalDate.now());
        bookService.addBook(book);
//        verify(bookRepository).save(book);
    }

    @Test
    public void testSaveBookWithBookRequest() {
        BookRequest bookRequest = new BookRequest("Mockito in Action", 500, LocalDate.now());
        Book book = new Book(null, "Mockito in Action", 500, LocalDate.now());
        bookService.addBook(bookRequest);
        verify(bookRepository, times(0)).save(book);
    }
    
    @Test
    public void testSaveBookWithBookRequest2() {
        BookRequest bookRequest = new BookRequest("Mockito in Action", 600, LocalDate.now());
        Book book = new Book(null, "Mockito in Action", 600, LocalDate.now());
        bookService.addBook(bookRequest);
        verify(bookRepository, times(1)).save(book);
    }
    
    @Test
    public void testSaveBookWithBookRequest3() {
        BookRequest bookRequest = new BookRequest("Mockito in Action", 500, LocalDate.now());
        Book book = new Book(null, "Mockito in Action", 500, LocalDate.now());
        bookService.addBook(bookRequest);
        verify(bookRepository, never()).save(book);
    }
    
    @Test
    public void testUpdatePrice(){
        bookService.updatePrice(null, 600);
        verifyNoInteractions(bookRepository);
    }
    @Test
    public void testUpdatePrice2(){
        Book book = new Book("1234", "Mockito in Action", 600, LocalDate.now());
        when(bookRepository.findBookById("1234")).thenReturn(book);
        bookService.updatePrice("1234", 600);
        verify(bookRepository).findBookById("1234");
        verify(bookRepository).save(book);
        verifyNoMoreInteractions(bookRepository);
    }
    @Test
    public void testUpdatePrice3(){
        Book book = new Book("1234", "Mockito in Action", 600, LocalDate.now());
        when(bookRepository.findBookById("1234")).thenReturn(book);
        bookService.updatePrice("1234", 600);
        
        InOrder inOrder = inOrder(bookRepository);
        inOrder.verify(bookRepository).findBookById("1234");
        inOrder.verify(bookRepository).save(book);
    }
    
    @Test
    public void testSaveBookWithBookRequestWithGreaterPrice3() {
        BookRequest bookRequest = new BookRequest("Mockito in Action", 600, LocalDate.now());
        Book book = new Book(null, "Mockito in Action", 600, LocalDate.now());
        bookService.addBook(bookRequest);
        bookService.addBook(bookRequest);
        bookService.addBook(bookRequest);
//        verify(bookRepository, times(2)).save(book);
//        verify(bookRepository, atLeast(2)).save(book);
//        verify(bookRepository, atMost(3)).save(book);
//        verify(bookRepository, atMostOnce()).save(book);
        verify(bookRepository, atLeastOnce()).save(book);    // проверяет, что метод вызывался хотя бы один раз
    }
}