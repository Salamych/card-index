package com.hubbersport.mokito.exception_handling;

import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InOrder;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class BookServiceTest {

    @InjectMocks
    private BookService bookService;

    @Mock
    private BookRepository bookRepository;

    @Test
    public void testTotalPriceOfBooks() throws SQLException {
        when(bookRepository.findAllBooks()).thenThrow(SQLClientInfoException.class);
        assertThrows(DatabaseReadException.class,() -> bookService.getTotalPriceOfBooks()) ;
    }
    @Test
    public void testTotalPriceOfBooks1() throws SQLException {
        when(bookRepository.findAllBooks()).thenThrow(new SQLException("Database not available"));
        assertThrows(DatabaseReadException.class,() -> bookService.getTotalPriceOfBooks()) ;
    }
    
    @Test
    public void testAddBook() throws SQLException {
        Book book = new Book(null, "Mockito in Action", 600, LocalDate.now());
        doThrow(SQLException.class).when(bookRepository).save(book);		    //проверка на не корректную работу при вызове void метода
        assertThrows(DatabaseWriteException.class,() -> bookService.addBook(book)) ;
    }
  
}
